# Базовый образ с которого мы начинаем сборку.
# Базовых образов очень много (Ubuntu, nginx и т.д.), т.к. у нас приложение интерпретируется в Python, то мы
# базовый образ у нас это python:3.6, через двоеточие ':' здесь указывается версия.
FROM python:3.6

# Здесь мы выполняем команду, RUN определяет, что мы должны выполнить определённую команду, которая идёт за RUN, т.е.
# создание папки
RUN mkdir -p /usr/src/app/
# Переходим в этот каталог (рабочий каталог приложения), т.е. мы создали папку и перешли в неё.
WORKDIR /usr/src/app/
# Копирование откуда (с нашей машины, с текущей директории) куда (в образ, в созданную ранее папку)
COPY . /usr/src/app/

# Устанавливаем зависимости из файла "requirements.txt"
RUN pip install --no-cache-dir -r requirements.txt

# Пробрасываем порт
EXPOSE 8080

# Определяем временную зону через переменную окружения.
# Сейчас мы передаём данный параметр, через строку запуска контейнера
# sudo docker run --rm --name web -p 8080:8080 -v web:/usr/src/app/resources -e TZ=Europe/Moscow web-hello
# ENV TZ Europe/Moscow


# Что нужно делать, когда мы запустим контейнер
# Здесь нужно выполнить команду python app.py
# есть разница между командами CMD и ENTRYPOINT, по сути они выполняют похожие действия, т.е.
# команда ENTRYPOINT ["python", "app.py"] будет выполнятся не в консоли (shell), а CMD в консоли (shell)
CMD ["python", "app.py"]
